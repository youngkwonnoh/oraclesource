-- hr에 있는 모든 테이블 확인
select * from tab;

-- employees 테이블의 모든 내용 확인
select * from employees;

-- employees 테이블의 first_name, last_name, job_id 만 조회
SELECT first_name, last_name, job_id FROM employees;

-- employee
-- 사원번호가 176인 사람의 LAST_NAME 과 부서 번호를 조회한다.
SELECT last_name, department_id FROM employees WHERE employee_id = 176;

-- SALARY가 12000 이상되는 직원들의  LAST_NAME 과 SALARY를 조회한다.
SELECT last_name, salary FROM employees WHERE salary > 12000;

-- SALARY가 5000에서 12000의 범위 이외의 사람들의 LAST_NAME 과 SALARY를 조회한다.
SELECT LAST_NAME, SALARY FROM EMPLOYEES WHERE SALARY < 5000 OR SALARY > 12000;


-- 20번, 50번 부서에서 근무하는 모든 사원들의 LAST_NAME 및 부서번호를 알파벳 순으로 조회
SELECT last_name, department_id FROM employees WHERE department_id = 20 OR department_id = 50 ORDER BY last_name ASC;
SELECT last_name, department_id FROM employees WHERE department_id IN(20, 50) ORDER BY last_name ASC;

-- COMMISSION_PCT을 버는 모든 사원들의 LAST_NAME, SALARY, COMMISSION_PCT를 조회
-- SALARY, COMMISSION_PCT 내림차순으로 정렬
SELECT LAST_NAME, SALARY, COMMISSION_PCT FROM employees WHERE commission_pct > 0 ORDER BY SALARY DESC, COMMISSION_PCT DESC;

-- SALARY이 2500, 3500, 7000이 아니며 직업이 SA_REP 혹은 ST_CLERK인 사원 조회
SELECT * FROM employees WHERE SALARY NOT IN(2500, 3500, 7000) AND JOB_ID IN('SA_REP', 'ST_CLERK');

-- 고용일자가 2008-02-20 ~ 2008-05-01 사이에 고용된 사원들의 LAST_NAME, EMPLOYEE_ID, HIRE_DATE
-- 를 조회한 후 고용일자 내림차순으로 정렬(날짜 데이터는 '' 사이에 넣어서 처리)
SELECT LAST_NAME, EMPLOYEE_ID, HIRE_DATE FROM employees WHERE HIRE_DATE >= '2008-02-20' AND HIRE_DATE <= '2008-05-01' ORDER BY HIRE_DATE DESC; 

-- 2004년도에 고용된 사람들의 LAST_NAME, HIRE_DATE를 조회한 후 입사일을 기준으로 오름차순 정렬
SELECT last_name, HIRE_DATE FROM employees WHERE HIRE_DATE >= '2004-01-01' AND HIRE_DATE <= '2004-12-31' ORDER BY HIRE_DATE ASC;

-- 20번, 50번 부서에서 근무하는 모든 사원들의 LAST_NAME, SALARY를 조회
-- 단, 급여는 5000 ~ 12000 사이의 사원만 조회한다.
SELECT last_name, SALARY FROM employees WHERE department_id IN(20, 50) AND salary BETWEEN 5000 AND 12000 ORDER BY SALARY;

-- 연봉이 5000 ~ 12000 범위 이외인 사람들의 LAST_NAME, SALARY를 조회
SELECT LAST_NAME, SALARY FROM EMPLOYEES WHERE SALARY NOT BETWEEN 5000 AND 12000;

-- 고용일자가 2008-02-20 ~ 2008-05-01 사이에 고용된 사원들의 LAST_NAME, EMPLOYEE_ID, HIRE_DATE
-- 를 조회한 후 고용일자 내림차순으로 정렬(날짜 데이터는 '' 사이에 넣어서 처리)
SELECT LAST_NAME, EMPLOYEE_ID, HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE BETWEEN '2008-02-20' AND '2008-05-01' ORDER BY HIRE_DATE DESC;

-- 2004년도에 고용된 사람들의 LAST_NAME, HIRE_DATE를 조회한 후 입사일을 기준으로 오름차순 정렬
SELECT LAST_NAME, HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE BETWEEN '2004-01-01' AND '2004-12-31' ORDER BY HIRE_DATE ASC;

-- LIKE
-- 2004년도에 고용된 모든 사람들의 LAST_NAME 및 HIRE_ADTE를 조회하여 입사일 기준으로 오름차순
SELECT LAST_NAME, HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%' ORDER BY HIRE_DATE;

-- LAST_NAME에 u가 포함되는 사월들의 EMPLOYEE_ID, LAST_NAME을 조회한다.
SELECT EMPLOYEE_ID, LAST_NAME FROM employees WHERE LAST_NAME LIKE '%u%';

-- LAST_NAME에 네 번째 글자가 A인 사원들의 LAST_NAME 조회
SELECT LAST_NAME FROM EMPLOYEES WHERE LAST_NAME LIKE '___a%';

-- LAST_NAME에 A혹은 E 글자가 있는 사원들의 LAST_NAME을 조회하여 LAST_NAME으로 오름차순
SELECT LAST_NAME FROM EMPLOYEES WHERE LAST_NAME LIKE '%a%' OR LAST_NAME LIKE '%e%' ORDER BY LAST_NAME;

-- LAST_NAME에 A와 E 글자가 있는 사원들의 LAST_NAME을 조회하여 LAST_NAME으로 내림차순
SELECT LAST_NAME FROM EMPLOYEES WHERE LAST_NAME LIKE '%a%e%' OR LAST_NAME LIKE '%e%a%' ORDER BY LAST_NAME DESC;
SELECT LAST_NAME FROM EMPLOYEES WHERE LAST_NAME LIKE '%a%' AND LAST_NAME LIKE '%e%' ORDER BY LAST_NAME DESC;


-- IS NULL
-- 매니저가 없는 사람들의 LAST_NAME, JOB_ID
SELECT LAST_NAME, JOB_ID FROM EMPLOYEES WHERE MANAGER_ID IS NULL;

-- ST_CLERK인 JOB_ID를 가진 사원이 없는 부서ID 조회. 단, 부서번호가 NULL인 값은 제외
SELECT DISTINCT DEPARTMENT_ID FROM EMPLOYEES WHERE JOB_ID NOT IN ('ST_CLERK') AND DEPARTMENT_ID IS NOT NULL;


-- COMMISSION_PCT가 NULL이 아닌 사원들 중에서 COMMISSION = SALARY * COMMISSION_PCT를 구하여
-- EMPLOYYE_ID, FIRST_NAME, JOB_ID 출력
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY * COMMISSION_PCT FROM EMPLOYEES WHERE COMMISSION_PCT IS NOT NULL;

-- 문자열 함수

-- FIRST_NAME이 Curtis인 사람의 first_name, last_name, phone_number, job_id 조회
-- 단, job_id 결과는 소문자로 출력
SELECT FIRST_NAME, LAST_NAME, PHONE_NUMBER, LOWER(JOB_ID) FROM EMPLOYEES WHERE FIRST_NAME = 'Curtis';


-- 부서번호가 60, 70, 80, 90인 사람들의 employee_id, first_name, hire_date, job_id 조회
-- 단, job_id가 IT_PROG인 사원의 경우 프로그래머로 변경해서 출력

SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE,  REPLACE(JOB_ID, 'IT_PROG', '프로그래머')
FROM EMPLOYEES WHERE DEPARTMENT_ID IN(60, 70, 80, 90);

-- job_id가 AD_PRES, PU_CLERK인 사원들의 EMPLOYEE_ID, FIRST_NAME, LAST_NAME,
-- DEPARTMENT_ID, JOB_ID 조회, 단 사원명은 FIRST_NAME과 LAST_NAME을 연결하여 출력
SELECT EMPLOYEE_ID, CONCAT(FIRST_NAME, CONCAT(' ', LAST_NAME)), DEPARTMENT_ID, JOB_ID FROM EMPLOYEES WHERE JOB_ID IN('AD_PRES', 'PU_CLERK');
SELECT EMPLOYEE_ID, FIRST_NAME || ' ' || LAST_NAME, DEPARTMENT_ID, JOB_ID FROM EMPLOYEES WHERE JOB_ID IN('AD_PRES', 'PU_CLERK');


-- -- 실습문제(ORACLE PPT 18번부터) 4번
SELECT LAST_NAME, SALARY,
    DECODE(TRUNC(SALARY/2000, 0),
        0, 0.00,
        1, 0.09,
        2, 0.20,
        3, 0.30,
        4, 0.40,
        5, 0.42,
        6, 0.44,
        0.45) AS TAX_RATE 
FROM employees WHERE DEPARTMENT_ID = 80;

SELECT LAST_NAME, SALARY,
    CASE 
        WHEN SALARY BETWEEN 0 AND 1999 THEN 0
        WHEN SALARY BETWEEN 2000 AND 3999 THEN 0.09
        WHEN SALARY BETWEEN 4000 AND 5999 THEN 0.2
        WHEN SALARY BETWEEN 6000 AND 7999 THEN 0.3
        WHEN SALARY BETWEEN 8000 AND 9999 THEN 0.4
        WHEN SALARY BETWEEN 10000 AND 11999 THEN 0.42
        WHEN SALARY BETWEEN 12000 AND 13999 THEN 0.44
        ELSE 0.45
    END AS TAX_RATE 
FROM EMPLOYEES;

-- 회사 내의 최대 연봉 및 최소 연봉의 차이 조회
SELECT MAX(SALARY) - MIN(SALARY) AS SAL_GAP FROM EMPLOYEES; 

-- 매니저로 근무하는 사원들의 총 수를 조회
SELECT COUNT(DISTINCT MANAGER_ID) AS 매니저 FROM EMPLOYEES;

-- 부서별 직원의 수를 구하여, 부서번호의 오름차순으로 출력
SELECT DEPARTMENT_ID, COUNT(EMPLOYEE_ID) FROM EMPLOYEES GROUP BY DEPARTMENT_ID ORDER BY DEPARTMENT_ID;

-- 부서별 급여의 평균 연봉을 출력하기(부서번호, 평균 연봉이 나오도록 하고
-- 부서번호별 오름차순 조회)
SELECT DEPARTMENT_ID, ROUND(AVG(SALARY)) FROM EMPLOYEES GROUP BY DEPARTMENT_ID ORDER BY DEPARTMENT_ID;

-- 동일한 직업을 가진 사원들의 수를 조회
SELECT JOB_ID, COUNT(EMPLOYEE_ID) FROM EMPLOYEES GROUP BY JOB_ID;

-- 매니저별 사원들 중 최소 연봉을 받는 사원의 연봉 조회
-- 매니저가 없는 사람 제외 / 최소 연봉이 6000미만 제외 / 연봉 기준 역순 출력
SELECT MANAGER_ID, MIN(SALARY)
FROM EMPLOYEES WHERE MANAGER_ID IS NOT NULL
GROUP BY MANAGER_ID HAVING MIN(SALARY) >= 6000 ORDER BY MIN(SALARY) DESC;


     