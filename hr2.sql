-- JOIN 실습
-- 자신의 담당 매니저의 고욜일보다 빠른 입사자를 찾아 HIRE_DATE, LAST_NAME, MANAGER_ID 출력
-- EMPLOYEES 테이블 SELF JOIN
SELECT E1.HIRE_DATE, E1.LAST_NAME, E1.MANAGER_ID
FROM EMPLOYEES E1, EMPLOYEES E2
WHERE E1.MANAGER_ID = E2.EMPLOYEE_ID AND E1.HIRE_DATE < E2.HIRE_DATE;

SELECT E1.HIRE_DATE, E1.LAST_NAME, E1.MANAGER_ID
FROM EMPLOYEES E1 JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID AND E1.HIRE_DATE < E2.HIRE_DATE;


-- 도시 이름이 T로 시작하는 지역에 사는 사원들의 EMPLOYEE_ID, LAST_NAME, DEPARTMENT_ID 출력
-- (DEPARTMENTS의 LOCATION_ID와 LOCATIONS의 LOCATION_ID 연결 후 CITY 명 알아내기)
SELECT E.EMPLOYEE_ID, E.LAST_NAME, D.DEPARTMENT_ID, L.CITY
FROM EMPLOYEES E, DEPARTMENTS D, LOCATIONS L
WHERE D.LOCATION_ID = L.LOCATION_ID
AND E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND L.CITY LIKE 'T%';


-- 위치 ID가 1700이고, 사원들의 EMPLOYEE_ID, LAST_NAME, DEPARTMENT_ID, SALARY 조회
-- DEPARTMENTS 테이블과 EMPLOYEES 조인

SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.DEPARTMENT_ID, E.SALARY
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND D.LOCATION_ID = 1700;

SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.DEPARTMENT_ID, E.SALARY
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND D.LOCATION_ID = 1700;


-- DEPARTMENT_NAME, LOCATION_ID, 각 부서별 사원 총 수, 각 부서별  평균 연봉 조회
-- 평균 연봉은 소수점 2자리까지만 표현
SELECT DEPARTMENT_NAME, LOCATION_ID, COUNT(*), ROUND(AVG(SALARY), 2)
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID 
GROUP BY DEPARTMENT_NAME, LOCATION_ID
ORDER BY LOCATION_ID;

SELECT DEPARTMENT_NAME, LOCATION_ID, COUNT(*), ROUND(AVG(SALARY), 2)
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
GROUP BY DEPARTMENT_NAME, LOCATION_ID
ORDER BY LOCATION_ID;


-- EXECUTIVE 부서에 근무하는 모든 사원들의 DEPARTMENT_ID, LAST_NAME, JOB_ID 조회
SELECT E.DEPARTMENT_ID, LAST_NAME, JOB_ID
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND D.DEPARTMENT_NAME = 'Executive';

SELECT E.DEPARTMENT_ID, LAST_NAME, JOB_ID
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND D.DEPARTMENT_NAME = 'Executive';


-- 각 사원들 별 소속 부서에서 자신보다 늦게 고용되었으나 보다 많은 연봉을 받는 사원이 존재하는
-- 모든 사원들의 DEPARTMENT_ID, FIRST_NAME과 LAST_NAME 조회
-- FIRST_NAME과 LAST_NAME 두 열은 합해서 하나로 출력

SELECT E1.DEPARTMENT_ID, E1.FIRST_NAME||' '||E1.LAST_NAME AS NAME
FROM EMPLOYEES E1, EMPLOYEES E2
WHERE E1.DEPARTMENT_ID = E2.DEPARTMENT_ID
AND E1.SALARY < E2.SALARY
AND E1.HIRE_DATE < E2.HIRE_DATE
ORDER BY E1.DEPARTMENT_ID;

-- 서브 쿼리
-- LAST_NAME에 u가 포함되는 사원들과 동일 부서에 근무하는 사원들의 LAST_NAME, EMPLOYEE_ID 조회

SELECT LAST_NAME, EMPLOYEE_ID 
FROM EMPLOYEES 
WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME LIKE '%u%');

-- Executive 부서에 근무하는 모든 사원들의 
-- DEPARTMENT_ID, LAST_NAME, JOB_ID 조회
SELECT E.DEPARTMENT_ID, E.LAST_NAME, E.JOB_ID
FROM EMPLOYEES E
WHERE (E.DEPARTMENT_ID, 'Executive') 
IN (SELECT DEPARTMENT_ID, DEPARTMENT_NAME FROM DEPARTMENTS);


-- 소속부서의 평균 연봉보다 적게 버는 사원들의 LAST_NAME, 평균연봉, 부서번호, 급여 조회
-- 부서번호의 내림차순, 급여의 내림차순 정렬 후 출력
-- 인라인 뷰로 처리(부서번호, 부서별 평균연봉)
SELECT LAST_NAME, AVG_SAL, E1.DEPARTMENT_ID, E1.SALARY
FROM EMPLOYEES E1,(SELECT DEPARTMENT_ID, ROUND(AVG(SALARY)) AS AVG_SAL 
                    FROM EMPLOYEES 
                    GROUP BY DEPARTMENT_ID) E2
WHERE E1.DEPARTMENT_ID = E2.DEPARTMENT_ID 
AND E1.SALARY < E2.AVG_SAL;

-- JOB_ID가 'SA_MAN'인 사원들의 최대 연봉보다 높게 받는 사원들의 
-- LAST_NAME, JOB ID, SALARY 조회
SELECT LAST_NAME, JOB_ID, SALARY
FROM EMPLOYEES E
WHERE E.SALARY > (SELECT MAX(SALARY) FROM EMPLOYEES WHERE JOB_ID = 'SA_MAN');


-- 커미션을 받는 사원들의 부서와 연봉이 동일한 사원들의 LAST_NAME, DEPARTMENT_ID, SALARY 조회
-- 다중열 서브쿼리로 작성
SELECT LAST_NAME, DEPARTMENT_ID, SALARY
FROM EMPLOYEES
WHERE (DEPARTMENT_ID, SALARY) IN (SELECT DEPARTMENT_ID, SALARY
                                  FROM EMPLOYEES
                                  WHERE COMMISSION_PCT > 0);


-- LAST_NAME이 'Davies'인 사람보다 나중에 고용된 사원들의 LAST_NAME, HIRE_DATE 조회
SELECT LAST_NAME, HIRE_DATE 
FROM EMPLOYEES
WHERE HIRE_DATE > (SELECT HIRE_DATE FROM EMPLOYEES WHERE LAST_NAME = 'Davies');

-- LAST_NAME이 'King'인 사원을 매니저로 두고 있는 모든 사원들의 LAST_NAME, SALARY 조회
SELECT LAST_NAME, SALARY
FROM EMPLOYEES
WHERE MANAGER_ID IN (SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE LAST_NAME = 'King');

-- LAST_NAME이 'Zlotkey'인 사원과 동일한 부서에 근무하는 모든 사원들의 
-- EMPLOYEE_ID, HIRE_DATE 조회
SELECT EMPLOYEE_ID, HIRE_DATE
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID 
                        FROM EMPLOYEES 
                        WHERE LAST_NAME = 'Zlotkey');


-- LAST_NAME이 'Kochhar'인 사원과 동일한 연봉 및 커미션을 버는 사원들의 LAST_NAME, DEPARTMENT_ID,
-- SALARY, COMMISSION_PCT 조회. 단, 'Kochhar'는 출력결과에서 제외한다.

SELECT E.LAST_NAME, E.DEPARTMENT_ID, E.SALARY, E.COMMISSION_PCT
FROM EMPLOYEES E
WHERE (SALARY, NVL(COMMISSION_PCT, 0)) IN (SELECT SALARY, NVL(COMMISSION_PCT, 0)
                                           FROM EMPLOYEES 
                                           WHERE LAST_NAME = 'Kochhar') 
                                           AND E.LAST_NAME != 'Kochhar';
